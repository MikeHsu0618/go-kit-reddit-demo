// THIS FILE IS AUTO GENERATED BY GK-CLI DO NOT EDIT!!
package service

import (
	endpoint1 "github.com/go-kit/kit/endpoint"
	log "github.com/go-kit/kit/log"
	prometheus "github.com/go-kit/kit/metrics/prometheus"
	http "github.com/go-kit/kit/transport/http"
	group "github.com/oklog/oklog/pkg/group"
	endpoint2 "go-kit-reddit-demo/internal/auth/endpoint"
	"go-kit-reddit-demo/internal/auth/service"
	http1 "go-kit-reddit-demo/internal/auth/transport/http"
)

func createService(endpoints endpoint2.Endpoints) (g *group.Group) {
	g = &group.Group{}
	initHttpHandler(endpoints, g)
	return g
}
func defaultHttpOptions(logger log.Logger) map[string][]http.ServerOption {
	options := map[string][]http.ServerOption{
		"GenerateToken": {http.ServerErrorEncoder(http1.ErrorEncoder), http.ServerErrorLogger(logger)},
		"ValidateToken": {http.ServerErrorEncoder(http1.ErrorEncoder), http.ServerErrorLogger(logger)},
	}
	return options
}
func addDefaultEndpointMiddleware(logger log.Logger, duration *prometheus.Summary, mw map[string][]endpoint1.Middleware) {
	mw["GenerateToken"] = []endpoint1.Middleware{endpoint2.LoggingMiddleware(log.With(logger, "method", "GenerateToken")), endpoint2.InstrumentingMiddleware(duration.With("method", "GenerateToken"))}
	mw["ValidateToken"] = []endpoint1.Middleware{endpoint2.LoggingMiddleware(log.With(logger, "method", "ValidateToken")), endpoint2.InstrumentingMiddleware(duration.With("method", "ValidateToken"))}
}
func addDefaultServiceMiddleware(logger log.Logger, mw []service.Middleware) []service.Middleware {
	return append(mw, service.LoggingMiddleware(logger))
}
func addEndpointMiddlewareToAllMethods(mw map[string][]endpoint1.Middleware, m endpoint1.Middleware) {
	methods := []string{"GenerateToken", "ValidateToken"}
	for _, v := range methods {
		mw[v] = append(mw[v], m)
	}
}
